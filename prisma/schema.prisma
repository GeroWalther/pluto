generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum Provider {
    google
    github
    credentials
}

model User {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String    @unique
    password        String
    isEmailVerified Boolean   @default(false)
    image           String?
    isAdmin         Boolean   @default(false)
    token           String    @unique
    provider        Provider?

    stripe_account_id String?
    payout_status String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sellerPaymentMethod SellerPayment[]

    // Product list
    listedProducts Product[]
    order          Order[]
}

enum Status {
    PENDING
    APPROVED
    REJECTED
}

// Product Model
model Product {
    id              String   @id @default(auto()) @map("_id") @db.ObjectId
    // Product details
    name            String
    description     String
    price           Float
    imageKeys       String[]
    imageUrls       String[]
    productFileUrls String[]
    productFileKeys String[]

    // product status
    status    Status   @default(PENDING)
    // Other info
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // User who listed the product
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId

    soldCount Int @default(0)

    category String @default("Image")
}

// Order Model
model Order {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    // Order details
    productNames String[]
    totalAmount  Float
    // Other info
    // product ID array
    productIds   String[]
    productFiles String[]
    orderId      String   @unique

    sellerIds String[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // User who placed the order
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId

    sendEmailToSeller Boolean @default(false)

    isSold Boolean @default(false)
}

model SellerPayment {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    paymentMethod String
    user          User   @relation(fields: [userId], references: [id])
    userId        String @db.ObjectId

    stripeId     String
    storedAmount Float  @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
